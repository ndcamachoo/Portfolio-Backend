## Nombre de la aplicación
# Define el nombre de la aplicación para ser identificado en ól los servicios (Balanceo de carga, Auto registro, etc)
spring.application.name= servicio-productos

## Definición de puertos
# Se define el puerto de la aplicación para no confundir con los puertos de los servicios
# Se deja el puerto en blanco para que el sistema asigne un puerto automóticamente. Este puerto es gestionado por el sistema (Para ello requiere definir un ID en la instancia de la aplicación)
# Esto solo se aplica en el caso de requerir un servicio que necesite ser escalado y utilicemos el balanceo de carga
server.port=${PORT:0}

## Configuración de la base de datos
#spring.h2.console.enabled=true
# driverClassName: indica el driver/lib para conectar Java a H2
spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver
# URL: Donde estó el servicio de DB y el nombre de la base de datos.
spring.datasource.url = jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:db_springboot_cloud}
spring.datasource.username= root
spring.datasource.password= root
# Habilita el dialecto de MySQL
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
# ddl-auto: indica que cuando se ejecuta la aplicación por primera vez, crea la base de datos todas las tablas automóticamente. Si existieran, las elimina.
spring.jpa.hibernate.ddl-auto=create-drop
logging.level.org.hibernate.SQL=DEBUG

## Ubicación del servidor de Eureka
# Define la URL del servidor de Eureka
eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
# ID de la instancia de la aplicación (Define un valor random)
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# Configuración de la trazabilidad
spring.sleuth.sampler.probability=1.0

# Zipkin
spring.zipkin.base-url=http://zipkin-server:9411/
spring.zipkin.sender.type=rabbit

# RabbitMQ
spring.rabbitmq.host=microservice-rabbitmq