package com.ndco.log4j2vulnerabilitydemo.controller;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


@RestController
public class VulnerabilityController {

    /* Set up the Logging process normally */
    private static final Logger Log = LogManager.getLogger(VulnerabilityController.class);

    /* A controller is created that, through a log process, can be injected and can violate the system. */
    /* This vulnerability could allow attackers with control over Thread Context Map (MDC) input data when the logging
        configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a
        Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern
        resulting in a denial of service (DOS) attack.
    */

    /*
      JNDI stands for Java Naming and Directory Interface. It basically allows applications to store and collect data
      identified by a name, organizing that data in a structure that can be similar to a directory structure.
      For example: ${jndi:ldap://127.0.0.1:5000/}
    */

    /*
       The sentence must be coded correctly to be sent by means of a link in the get method.
       You can use any url encoder found on the internet, for example https://www.urlencoder.org/.
       For example: %24%7Bjndi%3Aldap%3A%2F%2F127.0.0.1%3A5000%2F%7D
    */

    /*
       This link must be entered as a query parameter in the endpoint. Immediately the resource will be accessed and the
        result of the query can be seen in the console.
    */

    @GetMapping("/vulnerability")
    public ResponseEntity<?> test(@RequestParam("userInput") String userInput) {
        Log.info("User input: " + userInput);
        return new ResponseEntity<>("Message correctly displayed: " + userInput, HttpStatus.OK);
    }

}
